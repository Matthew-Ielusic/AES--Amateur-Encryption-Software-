(ns amateur.encryption.software.encrypt-test
  (:require
    [amateur.encryption.software.encrypt :as sut]
    [clojure.test :as t]))

(t/deftest shift-rows
  (let [state [ [0 1 2 3] [4 5 6 7] [8 9 10 11] [12 13 14 15] ]
        expected [ [0 1 2 3] [5 6 7 4] [10 11 8 9] [15 12 13 14] ]]
    (t/is (= expected (sut/shift-rows state)))))

(t/deftest mix-column
  (t/are
    [input expected]
    (= expected (sut/mix-column input))
    ; Test data is from Appendix B, row 1
    ;
    [0xd4 0xbf 0x5d 0x30] [0x04 0x66 0x81 0xe5]
    [0xe0 0xb4 0x52 0xae] [0xe0 0xcb 0x19 0x9a]
    [0xb8 0x41 0x11 0xf1] [0x48 0xf8 0xd3 0x7a]
    [0x1e 0x27 0x98 0xe5] [0x28 0x06 0x26 0x4c]))

(t/deftest mix-columns
  ; Test data is from Appendix B, Row 2
  (let [input    [ [0x49 0x45 0x7f 0x77]
                   [0xdb 0x39 0x02 0xde]
                   [0x87 0x53 0xd2 0x96]
                   [0x3b 0x89 0xf1 0x1a] ]
        expected [ [0x58 0x1b 0xdb 0x1b]
                   [0x4d 0x4b 0xe7 0x6b]
                   [0xca 0x5a 0xca 0xb0]
                   [0xf1 0xac 0xa8 0xe5]] ]
    (t/is
     (=
       expected
       (sut/mix-columns input)))))